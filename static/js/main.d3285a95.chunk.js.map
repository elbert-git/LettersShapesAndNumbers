{"version":3,"sources":["components/initialLoading.js","rootContext.js","module/web3/wallet.js","module/web3/contract.js","components/contractVars.js","module/merkleTree/merkleTree.js","components/connectWalletSection.js","index.js"],"names":["InitialLoading","className","wallet","contract","Wallet","this","initialised","web3","currentAddress","walletConnected","onWalletConnectionChanged","provider","Web3","window","ethereum","on","request","method","address","onWalletStatusChanged","getWalletObj","isMetaMask","console","log","init","contractAbi","require","Contract","contractVariables","totalSupply","supplyMinted","supplyLeft","whiteListMintsLeft","onUpdateContractVar","eth","methods","call","obj","isWhiteListing","balanceOf","userMinted","proof","mint","send","from","value","getContractObj","secret","rinkeby","rootContext","React","createContext","useRootContext","useContext","RootContext","children","useState","loading","setLoading","contractVars","setContractVars","currentWallet","setCurrentWallet","contextData","walletModule","walletAddress","contractModule","useEffect","load","getContractVariables","Provider","ContractVars","context","toString","MerkleTree","keccak256","tree","arrayOfAddress","leafNodes","map","addr","merkleTree","sortPairs","getRoot","split","leaf","getHexProof","bool","verify","getAddressProof","getRootHash","addressList","list","ConnectWallet","walletMod","whiteListProof","setWhiteListProof","mintsAllowed","parseInt","getProof","getUserVariables","reqWallet","requestWallet","onClick","length","getRootHashForContract","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.d3285a95.chunk.js","sourcesContent":["export default function InitialLoading(){\r\n  return(\r\n    <div className=\"fillWidth fillHeight flex flexJustifyCenter flexAlignCenter\">\r\n      <h1>Loading...</h1>\r\n    </div>\r\n  )\r\n}","import React, { useContext, useEffect, useState } from \"react\";\r\nimport InitialLoading from \"./components/initialLoading\";\r\nimport { getWalletObj } from \"./module/web3/wallet\";\r\nimport { getContractObj } from \"./module/web3/contract\";\r\n\r\n// --- create context\r\nexport const rootContext = React.createContext();\r\n// create context hook\r\nexport function useRootContext(){return useContext(rootContext)};\r\n\r\nlet wallet;\r\nlet contract;\r\n\r\n\r\nexport default function RootContext({children}) {\r\n  // --- states\r\n  const [loading, setLoading] = useState(false);\r\n  const [contractVars, setContractVars] = useState({});\r\n  const [currentWallet, setCurrentWallet] = useState(null);\r\n  // --- context data\r\n  const contextData = {\r\n    currentAddress: null,\r\n    contractVars: contractVars,\r\n    walletModule: wallet,\r\n    walletAddress: currentWallet,\r\n    contractModule: contract\r\n  };\r\n   \r\n  // --- load start up modules before rendering stuff\r\n  useEffect(()=>{\r\n    const load = async function(){\r\n      /// load start up modules\r\n      wallet = await getWalletObj();\r\n      wallet.onWalletConnectionChanged = setCurrentWallet;\r\n      contract = await getContractObj();\r\n      // get contract vars\r\n      contract.onUpdateContractVar = setContractVars;\r\n      await contract.getContractVariables();\r\n      setLoading(true);\r\n    }\r\n    load();\r\n  },[])\r\n\r\n  return (\r\n    <rootContext.Provider className=\"App\" value={contextData}>\r\n      {loading ? children : <InitialLoading/>}\r\n    </rootContext.Provider>\r\n  );\r\n}\r\n\r\n","import Web3 from 'web3/dist/web3.min';\r\n\r\nexport class Wallet{\r\n  constructor(){\r\n    // states\r\n    this.initialised = false;\r\n    this.web3 = null\r\n    this.currentAddress = null;\r\n    this.walletConnected = false;\r\n    // on wallet address changed\r\n    this.onWalletConnectionChanged = null;\r\n  }\r\n  async init(provider){\r\n    this.web3 = new Web3(provider);\r\n    // on accounts changed function\r\n    window.ethereum.on('accountsChanged', (wallet)=>{\r\n      // set this object account\r\n      this.currentAddress = wallet[0];\r\n      // call on wallwallet change fucntion\r\n      if(this.onWalletConnectionChanged !== null){\r\n        this.onWalletConnectionChanged(this.currentAddress);\r\n      }\r\n    });\r\n    this.initialised = true;\r\n  }\r\n\r\n  async requestWallet(){\r\n    // reach into metamask and ask for wallet\r\n    const address = await window.ethereum.request({method: 'eth_requestAccounts'});\r\n    this.walletConnected = (address[0] != null) ? true : false;\r\n    this.currentAddress = address[0];\r\n    if(this.onWalletStatusChanged !== null){\r\n      this.onWalletConnectionChanged(this.currentAddress);\r\n    }\r\n  }\r\n}\r\n\r\nexport const getWalletObj = async function(){\r\n  // --- get wallet\r\n  const wallet = new Wallet();\r\n  // --- check if metamask exists\r\n  if (typeof window.ethereum !== 'undefined' && window.ethereum.isMetaMask) { // has metmaask continue initialising\r\n    console.log('MetaMask is installed!');\r\n    // init wallet\r\n    await wallet.init(window.ethereum);\r\n  }else{ // do nothing without metamask\r\n    console.log('metamask is not installed');\r\n  }\r\n  return wallet;\r\n}","import Web3 from 'web3/dist/web3.min';\r\nimport secret from '../../secret.json';\r\n\r\n// get contract abi\r\nconst contractAbi =  require('./contractAbi');\r\nconst contractAddress = '0x1a0b59820576E229baEe0291E1a01657fd7bfeD4';\r\n\r\nclass Contract{\r\n  constructor(){\r\n    //states\r\n    this.initialised = false;\r\n    // vars\r\n    this.web3 = null;\r\n    this.contract = null;\r\n     \r\n    //contract variables\r\n    this.contractVariables = {\r\n      totalSupply : null,\r\n      supplyMinted : null,\r\n      supplyLeft : null,\r\n      whiteListMintsLeft : null\r\n    }\r\n     \r\n    // on update contract\r\n    this.onUpdateContractVar = null;\r\n  }\r\n  async init(provider){\r\n    // init web3\r\n    this.web3 = new Web3(provider);\r\n    // set contract instance\r\n    const contract = await new this.web3.eth.Contract(contractAbi, contractAddress);\r\n    this.contract = contract;\r\n    console.log(contract);\r\n    this.init = true;\r\n  }\r\n   \r\n  async getContractVariables(){\r\n    const totalSupply = 18;\r\n    const supplyMinted = await this.contract.methods.totalSupply().call();\r\n    const supplyLeft = 18 - supplyMinted;\r\n    const whiteListMintsLeft = supplyLeft - 9 - supplyMinted;\r\n    const obj = {\r\n      totalSupply : 18,\r\n      supplyMinted : supplyMinted,\r\n      supplyLeft : supplyLeft,\r\n      whiteListMintsLeft : whiteListMintsLeft,\r\n      isWhiteListing : whiteListMintsLeft > 0 ? true : false\r\n    }\r\n    if(obj.whiteListMintsLeft < 1){obj.whiteListMintsLeft = 0}\r\n    this.contractVariables = obj;\r\n    if(this.onUpdateContractVar != null){this.onUpdateContractVar(this.contractVariables)}\r\n  }\r\n\r\n  async getUserVariables(address){\r\n    let obj = {...this.contractVariables};\r\n    const userMinted = await this.contract.methods.balanceOf(address).call();\r\n    obj.userMinted = userMinted;\r\n    this.contractVariables = obj;\r\n    if(this.onUpdateContractVar != null){this.onUpdateContractVar(this.contractVariables)}\r\n  }\r\n  \r\n  async mint(address, proof){\r\n    await this.contract.methods.mint(1, proof).send({from:address, value: 0});\r\n  }\r\n}\r\n\r\nexport const getContractObj = async function(){\r\n  // --- get contract class\r\n  const contract = new Contract();\r\n  // --- check if metamask exists\r\n  if (typeof window.ethereum !== 'undefined' && window.ethereum.isMetaMask) { // has metmaask continue initialising\r\n    console.log('MetaMask is installed!');\r\n    // init wallet\r\n    await contract.init(window.ethereum);\r\n  }else{ // use infura to initialise\r\n    console.log('metamask not found. using infura');\r\n    await contract.init(secret.rinkeby);\r\n  }\r\n  return contract;\r\n}","import { useRootContext } from \"../rootContext\"\r\n\r\n\r\nexport default function ContractVars(){\r\n  const context = useRootContext().contractVars;\r\n  \r\n  return(\r\n    <div>\r\n      <h1>Contract Variables</h1>\r\n      <div>Total Supply Allowed in Contract: {context.totalSupply}</div>\r\n      <div>Supply Minted: {context.supplyMinted}</div>\r\n      <div>Supply Left: {context.supplyLeft}</div>\r\n      <div>is in white-listing mode: {context.isWhiteListing.toString()}</div>\r\n      <div>White-listed mints left to mint for everyone: {context.whiteListMintsLeft}</div>\r\n    </div>\r\n  )\r\n}","import addressList from './addressList.json';\r\nconst { MerkleTree } = require('merkletreejs');\r\nconst keccak256 = require('keccak256');\r\n\r\nclass AddressMerkleTree{\r\n  constructor(arrayOfAddress){\r\n    // create tree\r\n    this.leafNodes = arrayOfAddress.map(addr => keccak256(addr));\r\n    this.merkleTree = new MerkleTree(this.leafNodes, keccak256, { sortPairs: true});\r\n  }\r\n   \r\n  // get root hash for contract\r\n  getRootHashForContract(){\r\n    const rootHash = this.merkleTree.getRoot();\r\n    const tree = this.merkleTree.toString();\r\n    const firstLine = tree.split('\\n')[0];\r\n    const root = firstLine.split(' ')[1];\r\n    return ('0x'+root)\r\n  }\r\n  getRootHash(){\r\n    return this.merkleTree.getRoot();\r\n  }\r\n   \r\n  getAddressProof(address){\r\n    const leaf = keccak256(address);\r\n    const proof = this.merkleTree.getHexProof(leaf);\r\n    return proof;\r\n  }\r\n   \r\n  verify(address){\r\n    const bool = this.merkleTree.verify(this.getAddressProof(address), keccak256(address), this.getRootHash());\r\n    console.log(\"tree verify: \", bool);\r\n    return bool;\r\n  }\r\n}\r\n\r\nexport const tree = new AddressMerkleTree(addressList.list);\r\nconsole.log(tree.getRootHashForContract());","import axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useRootContext } from \"../rootContext\";\r\nimport { tree } from \"../module/merkleTree/merkleTree\";\r\n\r\n\r\n\r\nexport default function ConnectWallet(){\r\n  const context = useRootContext();\r\n  const contract = context.contractModule;\r\n  const address = context.walletAddress;\r\n  const walletMod = context.walletModule;\r\n  const [whiteListProof, setWhiteListProof] = useState([]);\r\n  const mintsAllowed = 1 - parseInt(contract.contractVariables.userMinted);\r\n  \r\n  useEffect(()=>{\r\n    const getProof = async function(){\r\n      if(address){ // have address\r\n        // get proof\r\n        const proof = tree.getAddressProof(address);\r\n        console.log(proof);\r\n        setWhiteListProof(proof)\r\n        await contract.getUserVariables(address); \r\n      }\r\n    }\r\n    getProof();\r\n    console.log()\r\n  },[address]);\r\n\r\n  const reqMint = function(){\r\n    console.log(whiteListProof);\r\n\r\n    contract.mint(\r\n      address,\r\n      whiteListProof\r\n    );\r\n  }\r\n   \r\n\r\n  const reqWallet = async function() {console.log('reqWallet'); await walletMod.requestWallet()}\r\n  \r\n  return(\r\n    <div>\r\n      <h1>Connect Wallet</h1>\r\n      <div>Current Wallet is: {address ? address : \"unconnected\"}</div>\r\n      <button onClick={reqWallet}>Connect Wallet</button>\r\n      <div>Are you part of whiteList?: {whiteListProof.length > 0 ? \"yes\":\"no\"}</div>\r\n      <div>Mints Left Allowed: {address ? mintsAllowed : \"0\"}</div>\r\n      {whiteListProof.length > 0 ? <button onClick={reqMint}>mint</button> : null}\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport RootContext from './rootContext';\r\nimport ContractVars from './components/contractVars';\r\nimport ConnectWallet from './components/connectWalletSection';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <RootContext>\r\n      <ContractVars></ContractVars>\r\n      <ConnectWallet></ConnectWallet>\r\n    </RootContext>\r\n  </React.StrictMode>\r\n);\r\n"],"sourceRoot":""}